// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// alphaArma
double alphaArma(const arma::mat& X);
RcppExport SEXP _Bayesrel_alphaArma(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(alphaArma(X));
    return rcpp_result_gen;
END_RCPP
}
// l2Arma
double l2Arma(const arma::mat& X);
RcppExport SEXP _Bayesrel_l2Arma(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l2Arma(X));
    return rcpp_result_gen;
END_RCPP
}
// l6Arma
double l6Arma(const arma::mat& X);
RcppExport SEXP _Bayesrel_l6Arma(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l6Arma(X));
    return rcpp_result_gen;
END_RCPP
}
// pfaArma
List pfaArma(const arma::mat& X);
RcppExport SEXP _Bayesrel_pfaArma(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(pfaArma(X));
    return rcpp_result_gen;
END_RCPP
}
